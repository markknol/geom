<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/local/lib/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/local/lib/haxe/std/Any.hx" private="1" module="Any"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/usr/local/lib/haxe/std/js/_std/Array.hx" extern="1">
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/usr/local/lib/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/local/lib/haxe/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="38" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="42" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="46" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Returns a Date from a formatted string `s`, with the following accepted
		formats:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats are expressed in local time, the third in UTC
		Epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of the date. It might
		only have a per-second precision depending on the platforms.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range).</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range).</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range).</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4-digits).</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range).</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range).</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range) where `0` is Sunday.</haxe_doc>
		</getDay>
		<toString public="1" get="inline" set="null" line="34">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date, by using the
		standard format [YYYY-MM-DD HH:MM:SS]. See `DateTools.format` for
		other formating rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null"><x path="Bool"/></global>
		<ignoreCase public="1" set="null"><x path="Bool"/></ignoreCase>
		<multiline public="1" set="null"><x path="Bool"/></multiline>
		<source public="1" set="null"><c path="String"/></source>
		<lastIndex public="1"><x path="Int"/></lastIndex>
		<exec public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Null"><c path="js.lib.RegExpMatch"/></x>
</f></exec>
		<test public="1" set="method"><f a="str">
	<c path="String"/>
	<x path="Bool"/>
</f></test>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<new public="1" set="method"><f a="pattern:?flags">
	<c path="String"/>
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).</haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/usr/local/lib/haxe/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/usr/local/lib/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/local/lib/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/local/lib/haxe/std/EnumValue.hx" private="1" module="EnumValue"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Math" params="" file="/usr/local/lib/haxe/std/js/_std/Math.hx" extern="1">
		<abs public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></abs>
		<acos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></acos>
		<asin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></asin>
		<atan2 public="1" set="method" static="1"><f a="y:x">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></atan2>
		<cos public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></cos>
		<max public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></max>
		<min public="1" set="method" static="1"><f a="a:b">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></min>
		<pow public="1" set="method" static="1"><f a="v:exp">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
</f></pow>
		<sin public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sin>
		<sqrt public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></sqrt>
		<tan public="1" set="method" static="1"><f a="v">
	<x path="Float"/>
	<x path="Float"/>
</f></tan>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="js.Syntax" params="" file="/usr/local/lib/haxe/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```</haxe_doc>
		</code>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<x path="haxe.extern.Rest"><d/></x>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="String" params="" file="/usr/local/lib/haxe/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="57" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex` (if `startIndex` is posivite
		or 0) or `max(this.length + startIndex, 0)` (if `startIndex` is negative).

		If `startIndex` exceeds `this.length`, -1 is returned.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="39">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<iterator public="1" get="inline" set="null" line="43">
			<f a=""><c path="haxe.iterators.StringIterator"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":runtime"/>
			</meta>
			<haxe_doc>Returns an iterator of the char codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringIteratorUnicode`.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="48">
			<f a=""><c path="haxe.iterators.StringKeyValueIterator"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":runtime"/>
			</meta>
			<haxe_doc>Returns an iterator of the char indexes and codes.

		Note that char codes may differ across platforms because of different
		internal encoding of strings in different of runtimes.
		For the consistent cross-platform UTF8 char codes see `haxe.iterators.StringKeyValueIteratorUnicode`.</haxe_doc>
		</keyValueIterator>
		<substr public="1" get="inline" set="null" line="53">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/usr/local/lib/haxe/std/js/_std/Std.hx">
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has an `iterator()` method
	to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/local/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="geom.GeomDoc" params="" file="src/geom/GeomDoc.hx">
		<main public="1" set="method" line="5" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<new public="1" set="method" line="8"><f a=""><x path="Void"/></f></new>
	</class>
	<typedef path="geom.Vec2" params="" file="src/geom/Matrix1x2.hx" module="geom.Matrix1x2"><x path="geom.Matrix1x2"/></typedef>
	<abstract path="geom.Matrix1x2" params="" file="src/geom/Matrix1x2.hx">
		<from>
			<icast><c path="geom.structure.Mat1x2"/></icast>
			<icast field="fromVec3"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="geom.structure.Mat1x2"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x2"/></icast>
			<icast field="toTpoint"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></icast>
			<icast field="toVec3"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Matrix1x2.Matrix1x2_Impl_" params="" file="src/geom/Matrix1x2.hx" private="1" module="geom.Matrix1x2">
	<_new public="1" get="inline" set="null" line="5" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="12" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.zero() == new Matrix1x2({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="21" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magnitude>
	<get_magnitude get="inline" set="null" line="31" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5
     * </code></pre>]]></haxe_doc>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="44" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = new Matrix1x2( { x: 9., y: 12. } );
     * ... m.magnitude = 5;
     * ... ( m.x == 3. && m.y == 4. ) == true; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</set_magnitude>
	<topLeft public="1" get="inline" set="null" line="61" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</topLeft>
	<topRight public="1" get="inline" set="null" line="70" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
	</topRight>
	<bottomLeft public="1" get="inline" set="null" line="79" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</bottomLeft>
	<bottomRight public="1" get="inline" set="null" line="88" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })
     * </code></pre>]]></haxe_doc>
	</bottomRight>
	<north public="1" get="inline" set="null" line="97" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })
     * </code></pre>]]></haxe_doc>
	</north>
	<south public="1" get="inline" set="null" line="106" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })
     * </code></pre>]]></haxe_doc>
	</south>
	<west public="1" get="inline" set="null" line="115" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })
     * </code></pre>]]></haxe_doc>
	</west>
	<east public="1" get="inline" set="null" line="124" static="1">
		<f a=""><x path="geom.Matrix1x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })
     * </code></pre>]]></haxe_doc>
	</east>
	<add public="1" get="inline" set="null" line="133" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() + Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="142" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() - Matrix1x2.unit() == new Matrix1x2( { x: 0., y: 0. } )
     * </code></pre>]]></haxe_doc>
	</subtract>
	<dot public="1" get="inline" set="null" line="147" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</dot>
	<scaleMultiply public="1" get="inline" set="null" line="157" static="1">
		<f a="a:v">
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() * 2 == new Matrix1x2( { x: 2., y: 2. } )
     * >>> 2 * Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="166" static="1">
		<f a="a:v">
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )
     * </code></pre>]]></haxe_doc>
	</divide>
	<equal public="1" get="inline" set="null" line="179" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a == b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="192" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 5. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a != b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<perp public="1" get="inline" set="null" line="202" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"perp" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</perp>
	<mid public="1" get="inline" set="null" line="217" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3.,  y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 4.,  y: 2. } ); 
     * ... var c = new Matrix1x2( { x: 3.5, y: 1.5 } );
     * ... var mid = Matrix1x2.mid( a, b ); 
     * ... mid == c;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</mid>
	<distanceBetweenSquare public="1" get="inline" set="null" line="230" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* test with 3,4,5 triangle
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetweenSquare( b ); }) == 25
     * </code></pre>]]></haxe_doc>
	</distanceBetweenSquare>
	<distanceBetween public="1" get="inline" set="null" line="245" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* test with 3,4,5 triangle
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } );
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetween( b ); }) == 5
     * </code></pre>]]></haxe_doc>
	</distanceBetween>
	<span public="1" get="inline" set="null" line="254" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"span" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</span>
	<normalize public="1" get="inline" set="null" line="263" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"normalize" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</normalize>
	<lenSquare public="1" get="inline" set="null" line="275" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 3. } ); 
     * ... a.lenSquare(); }) == 18
     * </code></pre>]]></haxe_doc>
	</lenSquare>
	<distance public="1" get="inline" set="null" line="286" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 4. } ); 
     * ... a.distance(); }) == 5
     * </code></pre>]]></haxe_doc>
	</distance>
	<isLeft public="1" get="inline" set="null" line="308" static="1">
		<f a="this:a:b">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"isLeft" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</isLeft>
	<triangleArea public="1" get="inline" set="null" line="317" static="1">
		<f a="a:b:c">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"triangleArea" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</triangleArea>
	<sign public="1" get="inline" set="null" line="327" static="1">
		<f a="n">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.sign( -7. ) == -1
     * >>> Matrix1x2.sign( 7. ) == 1
     * </code></pre>]]></haxe_doc>
	</sign>
	<thetaDifference public="1" get="inline" set="null" line="343" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero() ) == 0
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero() ) == -Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero() ) == -Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero() ) == -3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero() ) == Math.PI
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero() ) == 3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero() ) == Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero() ) == Math.PI/4
     * </code></pre>]]></haxe_doc>
	</thetaDifference>
	<inTri public="1" get="inline" set="null" line="355" static="1">
		<f a="this:a:b:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</inTri>
	<inTri2 public="1" get="inline" set="null" line="367" static="1">
		<f a="this:a:b:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri2" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</inTri2>
	<inRect public="1" get="inline" set="null" line="413" static="1">
		<f a="this:b:c">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == true
     *
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == false
     *
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == false
     * 
     * >>> ({ 
     * ... var a = Matrix1x2.bottomRight()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</inRect>
	<convex public="1" get="inline" set="null" line="440" static="1">
		<f a="a:b:c">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Bool"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var l = new Matrix1x2( { x: 1., y: 0. });
     * ... var t = new Matrix1x2( { x: 2., y: 1. });
     * ... var r = new Matrix1x2( { x: 4., y: 0. });
     * ... var b = new Matrix1x2( { x: 3., y: -1. });
     * ... (!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</convex>
	<cross public="1" get="inline" set="null" line="449" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"cross" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</cross>
	<theta public="1" get="inline" set="null" line="465" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east().theta()        == 0.
     * >>> Matrix1x2.bottomRight().theta() == -Math.PI/4
     * >>> Matrix1x2.south().theta()       == -Math.PI/2
     * >>> Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4
     * >>> Matrix1x2.west().theta()        == Math.PI
     * >>> Matrix1x2.topLeft().theta()     == 3*Math.PI/4
     * >>> Matrix1x2.north().theta()       == Math.PI/2
     * >>> Matrix1x2.topRight().theta()    == Math.PI/4
     * </code></pre>]]></haxe_doc>
	</theta>
	<close public="1" get="inline" set="null" line="477" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 0.5, y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</close>
	<xClose public="1" get="inline" set="null" line="489" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = new Matrix1x2( { x: 0.5, y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</xClose>
	<yClose public="1" get="inline" set="null" line="502" static="1">
		<f a="this:b:?delta" v="::0.00001">
			<c path="geom.structure.Mat1x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="Float"/>
			<x path="Bool"/>
		</f>
		<meta>
			<m n=":value"><e>{ delta : 0.00001 }</e></m>
			<m n=":impl"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
	</yClose>
	<pivotAround public="1" get="inline" set="null" line="515" static="1">
		<f a="this:omega:pivot">
			<c path="geom.structure.Mat1x2"/>
			<x path="Float"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight(); 
     * ... var b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 ); 
     * ... b.close( Matrix1x2.north() ); }) == true
     * </code></pre>]]></haxe_doc>
	</pivotAround>
	<toTpoint public="1" get="inline" set="null" line="529" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<t path="geom.tydef.Tpoint"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"toTPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</toTpoint>
	<toVec3 public="1" get="inline" set="null" line="543" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x2"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVec3>
	<fromVec3 public="1" get="inline" set="null" line="561" static="1">
		<f a="v3">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec3>
	<fromArrayPos public="1" set="method" line="570" static="1">
		<f a="arr:pos">
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})
     * </code></pre>]]></haxe_doc>
	</fromArrayPos>
	<toArrayPos public="1" get="inline" set="null" line="582" static="1">
		<f a="this:arr:pos">
			<c path="geom.structure.Mat1x2"/>
			<c path="Array"><x path="Float"/></c>
			<x path="Int"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 5., y: 6. } ); 
     * ... var arr = [ 0., 1., 2. ]; 
     * ... a.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]
     * </code></pre>]]></haxe_doc>
	</toArrayPos>
</class></impl>
	</abstract>
	<class path="geom._Matrix1x2.Matrix1x2_Impl_" params="" file="src/geom/Matrix1x2.hx" private="1" module="geom.Matrix1x2">
		<_new public="1" get="inline" set="null" line="5" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="12" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.zero() == new Matrix1x2({ x: 0., y: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="21" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magnitude>
		<get_magnitude get="inline" set="null" line="31" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ( new Matrix1x2( { x: 4., y: 3. } ) ).magnitude == 5
     * </code></pre>]]></haxe_doc>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="44" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var m = new Matrix1x2( { x: 9., y: 12. } );
     * ... m.magnitude = 5;
     * ... ( m.x == 3. && m.y == 4. ) == true; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</set_magnitude>
		<topLeft public="1" get="inline" set="null" line="61" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topLeft() == new Matrix1x2({ x: -1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</topLeft>
		<topRight public="1" get="inline" set="null" line="70" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.topRight() == new Matrix1x2({ x: 1., y: 1. })
     * </code></pre>]]></haxe_doc>
		</topRight>
		<bottomLeft public="1" get="inline" set="null" line="79" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomLeft() == new Matrix1x2({ x: -1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</bottomLeft>
		<bottomRight public="1" get="inline" set="null" line="88" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.bottomRight() == new Matrix1x2({ x: 1., y: -1. })
     * </code></pre>]]></haxe_doc>
		</bottomRight>
		<north public="1" get="inline" set="null" line="97" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.north() == new Matrix1x2({ x: 0., y: 1. })
     * </code></pre>]]></haxe_doc>
		</north>
		<south public="1" get="inline" set="null" line="106" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.south() == new Matrix1x2({ x: 0., y: -1. })
     * </code></pre>]]></haxe_doc>
		</south>
		<west public="1" get="inline" set="null" line="115" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.west() == new Matrix1x2({ x: -1., y: 0. })
     * </code></pre>]]></haxe_doc>
		</west>
		<east public="1" get="inline" set="null" line="124" static="1">
			<f a=""><x path="geom.Matrix1x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east() == new Matrix1x2({ x: 1., y: 0. })
     * </code></pre>]]></haxe_doc>
		</east>
		<add public="1" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() + Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="142" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() - Matrix1x2.unit() == new Matrix1x2( { x: 0., y: 0. } )
     * </code></pre>]]></haxe_doc>
		</subtract>
		<dot public="1" get="inline" set="null" line="147" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</dot>
		<scaleMultiply public="1" get="inline" set="null" line="157" static="1">
			<f a="a:v">
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() * 2 == new Matrix1x2( { x: 2., y: 2. } )
     * >>> 2 * Matrix1x2.unit() == new Matrix1x2( { x: 2., y: 2. } )
     * </code></pre>]]></haxe_doc>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="166" static="1">
			<f a="a:v">
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.unit() / 2 == new Matrix1x2( { x: 0.5, y: 0.5 } )
     * </code></pre>]]></haxe_doc>
		</divide>
		<equal public="1" get="inline" set="null" line="179" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a == b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="192" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 7., y: 5. } ); 
     * ... var b = new Matrix1x2( { x: 7., y: 6. } ); 
     * ... a != b; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<perp public="1" get="inline" set="null" line="202" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"perp" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</perp>
		<mid public="1" get="inline" set="null" line="217" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3.,  y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 4.,  y: 2. } ); 
     * ... var c = new Matrix1x2( { x: 3.5, y: 1.5 } );
     * ... var mid = Matrix1x2.mid( a, b ); 
     * ... mid == c;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</mid>
		<distanceBetweenSquare public="1" get="inline" set="null" line="230" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* test with 3,4,5 triangle
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetweenSquare( b ); }) == 25
     * </code></pre>]]></haxe_doc>
		</distanceBetweenSquare>
		<distanceBetween public="1" get="inline" set="null" line="245" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* test with 3,4,5 triangle
     * <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 1. } );
     * ... var b = new Matrix1x2( { x: 1. + 3., y: 1. + 4. } ); 
     * ... a.distanceBetween( b ); }) == 5
     * </code></pre>]]></haxe_doc>
		</distanceBetween>
		<span public="1" get="inline" set="null" line="254" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"span" untested still to consider'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</span>
		<normalize public="1" get="inline" set="null" line="263" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"normalize" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</normalize>
		<lenSquare public="1" get="inline" set="null" line="275" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 3. } ); 
     * ... a.lenSquare(); }) == 18
     * </code></pre>]]></haxe_doc>
		</lenSquare>
		<distance public="1" get="inline" set="null" line="286" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 3., y: 4. } ); 
     * ... a.distance(); }) == 5
     * </code></pre>]]></haxe_doc>
		</distance>
		<isLeft public="1" get="inline" set="null" line="308" static="1">
			<f a="this:a:b">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"isLeft" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</isLeft>
		<triangleArea public="1" get="inline" set="null" line="317" static="1">
			<f a="a:b:c">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"triangleArea" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</triangleArea>
		<sign public="1" get="inline" set="null" line="327" static="1">
			<f a="n">
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.sign( -7. ) == -1
     * >>> Matrix1x2.sign( 7. ) == 1
     * </code></pre>]]></haxe_doc>
		</sign>
		<thetaDifference public="1" get="inline" set="null" line="343" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.thetaDifference( Matrix1x2.east(),        Matrix1x2.zero() ) == 0
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomRight(), Matrix1x2.zero() ) == -Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.south(),       Matrix1x2.zero() ) == -Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.bottomLeft(),  Matrix1x2.zero() ) == -3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.west(),        Matrix1x2.zero() ) == Math.PI
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topLeft(),     Matrix1x2.zero() ) == 3*Math.PI/4
     * >>> Matrix1x2.thetaDifference( Matrix1x2.north(),       Matrix1x2.zero() ) == Math.PI/2
     * >>> Matrix1x2.thetaDifference( Matrix1x2.topRight(),    Matrix1x2.zero() ) == Math.PI/4
     * </code></pre>]]></haxe_doc>
		</thetaDifference>
		<inTri public="1" get="inline" set="null" line="355" static="1">
			<f a="this:a:b:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</inTri>
		<inTri2 public="1" get="inline" set="null" line="367" static="1">
			<f a="this:a:b:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"inTri2" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</inTri2>
		<inRect public="1" get="inline" set="null" line="413" static="1">
			<f a="this:b:c">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == true
     *
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.zero(); 
     * ... var c = Matrix1x2.topRight(); 
     * ... a.inRect( b, c ); }) == false
     *
     * >>> ({ 
     * ... var a = Matrix1x2.bottomLeft()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == false
     * 
     * >>> ({ 
     * ... var a = Matrix1x2.bottomRight()/2; 
     * ... var b = Matrix1x2.bottomRight(); 
     * ... var c = Matrix1x2.zero(); 
     * ... a.inRect( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</inRect>
		<convex public="1" get="inline" set="null" line="440" static="1">
			<f a="a:b:c">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var l = new Matrix1x2( { x: 1., y: 0. });
     * ... var t = new Matrix1x2( { x: 2., y: 1. });
     * ... var r = new Matrix1x2( { x: 4., y: 0. });
     * ... var b = new Matrix1x2( { x: 3., y: -1. });
     * ... (!Matrix1x2.convex( l, t, r ) && Matrix1x2.convex( l, b, r )) == true;
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</convex>
		<cross public="1" get="inline" set="null" line="449" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"cross" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</cross>
		<theta public="1" get="inline" set="null" line="465" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.east().theta()        == 0.
     * >>> Matrix1x2.bottomRight().theta() == -Math.PI/4
     * >>> Matrix1x2.south().theta()       == -Math.PI/2
     * >>> Matrix1x2.bottomLeft().theta()  == -3*Math.PI/4
     * >>> Matrix1x2.west().theta()        == Math.PI
     * >>> Matrix1x2.topLeft().theta()     == 3*Math.PI/4
     * >>> Matrix1x2.north().theta()       == Math.PI/2
     * >>> Matrix1x2.topRight().theta()    == Math.PI/4
     * </code></pre>]]></haxe_doc>
		</theta>
		<close public="1" get="inline" set="null" line="477" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 0.5, y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</close>
		<xClose public="1" get="inline" set="null" line="489" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = new Matrix1x2( { x: 0.5, y: 1. } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</xClose>
		<yClose public="1" get="inline" set="null" line="502" static="1">
			<f a="this:b:?delta" v="::0.00001">
				<c path="geom.structure.Mat1x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="Float"/>
				<x path="Bool"/>
			</f>
			<meta>
				<m n=":value"><e>{ delta : 0.00001 }</e></m>
				<m n=":impl"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 1., y: 0.5 } ); 
     * ... var b = new Matrix1x2( { x: 0.5000001, y: 0.5000001 } ); 
     * ... a.close( b ); }) == true
     * </code></pre>]]></haxe_doc>
		</yClose>
		<pivotAround public="1" get="inline" set="null" line="515" static="1">
			<f a="this:omega:pivot">
				<c path="geom.structure.Mat1x2"/>
				<x path="Float"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.topRight(); 
     * ... var b = a.pivotAround( Math.PI/2, Matrix1x2.topRight()/2 ); 
     * ... b.close( Matrix1x2.north() ); }) == true
     * </code></pre>]]></haxe_doc>
		</pivotAround>
		<toTpoint public="1" get="inline" set="null" line="529" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<t path="geom.tydef.Tpoint"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"toTPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</toTpoint>
		<toVec3 public="1" get="inline" set="null" line="543" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x2"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVec3>
		<fromVec3 public="1" get="inline" set="null" line="561" static="1">
			<f a="v3">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x2.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1. ]);
     * ... var c: Matrix1x2 = b;
     * ... a == c; 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec3>
		<fromArrayPos public="1" set="method" line="570" static="1">
			<f a="arr:pos">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x2.fromArrayPos( [ 0., 1., 2. ], 1) ==  new Matrix1x2({x:1.,y:2.})
     * </code></pre>]]></haxe_doc>
		</fromArrayPos>
		<toArrayPos public="1" get="inline" set="null" line="582" static="1">
			<f a="this:arr:pos">
				<c path="geom.structure.Mat1x2"/>
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x2( { x: 5., y: 6. } ); 
     * ... var arr = [ 0., 1., 2. ]; 
     * ... a.toArrayPos( arr, 1 ); }) == [ 0., 5., 6. ]
     * </code></pre>]]></haxe_doc>
		</toArrayPos>
	</class>
	<typedef path="geom.Vec4" params="" file="src/geom/Matrix1x4.hx" module="geom.Matrix1x4"><x path="geom.Matrix1x4"/></typedef>
	<abstract path="geom.Matrix1x4" params="" file="src/geom/Matrix1x4.hx">
		<from>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
		</from>
		<this><c path="geom.structure.Mat1x4"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Matrix1x4.Matrix1x4_Impl_" params="" file="src/geom/Matrix1x4.hx" private="1" module="geom.Matrix1x4">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="13" static="1">
		<f a=""><x path="geom.Matrix1x4"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.zero() == new Matrix1x4({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="22" static="1">
		<f a=""><x path="geom.Matrix1x4"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.unit() == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<identity public="1" get="inline" set="null" line="31" static="1">
		<f a="out">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.identity( Matrix1x4.zero() ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</identity>
	<copy public="1" get="inline" set="null" line="48" static="1">
		<f a="pin:pout">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Matrix1x4.zero();
     * ... var c = Matrix1x4.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<projectPoint public="1" get="inline" set="null" line="61" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"projectPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</projectPoint>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitude>
	<get_magnitude get="inline" set="null" line="75" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="79" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magnitude>
	<equal public="1" get="inline" set="null" line="102" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="120" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<magnitudeSquared public="1" get="inline" set="null" line="129" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
	</magnitudeSquared>
	<add public="1" get="inline" set="null" line="141" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="153" static="1">
		<f a="a:b">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a - a == Matrix1x4.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<scalarProduct public="1" get="inline" set="null" line="165" static="1"><f a="a:b">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="Float"/>
</f></scalarProduct>
	<dotProd public="1" get="inline" set="null" line="169" static="1">
		<f a="this:b">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</dotProd>
	<scaleMultiply public="1" get="inline" set="null" line="174" static="1">
		<f a="a:v">
			<x path="geom.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<transformPoint public="1" get="inline" set="null" line="178" static="1">
		<f a="this:t">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</transformPoint>
	<divide public="1" get="inline" set="null" line="185" static="1">
		<f a="a:v">
			<x path="geom.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="189" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<conjugate public="1" get="inline" set="null" line="201" static="1">
		<f a="a">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<negate public="1" get="inline" set="null" line="217" static="1">
		<f a="a">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<multiplyV public="1" get="inline" set="null" line="225" static="1"><f a="a:b:out">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
</f></multiplyV>
	<multiplyQ public="1" get="inline" set="null" line="241" static="1"><f a="q:v:out">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
</f></multiplyQ>
	<cross public="1" get="inline" set="null" line="256" static="1">
		<f a="this:v">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cross>
	<fromAxisAngle public="1" get="inline" set="null" line="263" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
</f></fromAxisAngle>
	<lerp public="1" get="inline" set="null" line="270" static="1"><f a="a:b:t">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="Float"/>
	<x path="geom.Matrix1x4"/>
</f></lerp>
	<euler public="1" get="accessor" set="accessor" static="1">
		<x path="geom.Matrix1x4"/>
		<meta><m n=":impl"/></meta>
	</euler>
	<set_euler get="inline" set="null" line="275" static="1">
		<f a="this:a">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_euler>
	<get_euler get="inline" set="null" line="292" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_euler>
	<slerp public="1" set="method" line="300" static="1">
		<f a="this:a:b:t">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</slerp>
	<normalize public="1" get="inline" set="null" line="337" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</normalize>
	<constrainDistance public="1" get="inline" set="null" line="342" static="1">
		<f a="this:anchor:distance">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
			<x path="Float"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</constrainDistance>
	<fromVec public="1" get="inline" set="null" line="356" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Matrix1x4 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="370" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="388" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Matrix1x4 = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="400" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
</class></impl>
	</abstract>
	<class path="geom._Matrix1x4.Matrix1x4_Impl_" params="" file="src/geom/Matrix1x4.hx" private="1" module="geom.Matrix1x4">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="13" static="1">
			<f a=""><x path="geom.Matrix1x4"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.zero() == new Matrix1x4({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="22" static="1">
			<f a=""><x path="geom.Matrix1x4"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.unit() == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<identity public="1" get="inline" set="null" line="31" static="1">
			<f a="out">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix1x4.identity( Matrix1x4.zero() ) == new Matrix1x4({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</identity>
		<copy public="1" get="inline" set="null" line="48" static="1">
			<f a="pin:pout">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Matrix1x4.zero();
     * ... var c = Matrix1x4.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<projectPoint public="1" get="inline" set="null" line="61" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"projectPoint" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</projectPoint>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitude>
		<get_magnitude get="inline" set="null" line="75" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="79" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magnitude>
		<equal public="1" get="inline" set="null" line="102" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="120" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Matrix1x4({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<magnitudeSquared public="1" get="inline" set="null" line="129" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ trace('"magnitude" untested'); true; }) == true
     * </code></pre>]]></haxe_doc>
		</magnitudeSquared>
		<add public="1" get="inline" set="null" line="141" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a + a == new Matrix1x4({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="153" static="1">
			<f a="a:b">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... a - a == Matrix1x4.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<scalarProduct public="1" get="inline" set="null" line="165" static="1"><f a="a:b">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="Float"/>
</f></scalarProduct>
		<dotProd public="1" get="inline" set="null" line="169" static="1">
			<f a="this:b">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</dotProd>
		<scaleMultiply public="1" get="inline" set="null" line="174" static="1">
			<f a="a:v">
				<x path="geom.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<transformPoint public="1" get="inline" set="null" line="178" static="1">
			<f a="this:t">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</transformPoint>
		<divide public="1" get="inline" set="null" line="185" static="1">
			<f a="a:v">
				<x path="geom.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="189" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<conjugate public="1" get="inline" set="null" line="201" static="1">
			<f a="a">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<negate public="1" get="inline" set="null" line="217" static="1">
			<f a="a">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix1x4({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Matrix1x4({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<multiplyV public="1" get="inline" set="null" line="225" static="1"><f a="a:b:out">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
</f></multiplyV>
		<multiplyQ public="1" get="inline" set="null" line="241" static="1"><f a="q:v:out">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
</f></multiplyQ>
		<cross public="1" get="inline" set="null" line="256" static="1">
			<f a="this:v">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cross>
		<fromAxisAngle public="1" get="inline" set="null" line="263" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
</f></fromAxisAngle>
		<lerp public="1" get="inline" set="null" line="270" static="1"><f a="a:b:t">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="Float"/>
	<x path="geom.Matrix1x4"/>
</f></lerp>
		<euler public="1" get="accessor" set="accessor" static="1">
			<x path="geom.Matrix1x4"/>
			<meta><m n=":impl"/></meta>
		</euler>
		<set_euler get="inline" set="null" line="275" static="1">
			<f a="this:a">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_euler>
		<get_euler get="inline" set="null" line="292" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_euler>
		<slerp public="1" set="method" line="300" static="1">
			<f a="this:a:b:t">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</slerp>
		<normalize public="1" get="inline" set="null" line="337" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</normalize>
		<constrainDistance public="1" get="inline" set="null" line="342" static="1">
			<f a="this:anchor:distance">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
				<x path="Float"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</constrainDistance>
		<fromVec public="1" get="inline" set="null" line="356" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Matrix1x4 = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="370" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="388" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Matrix1x4 = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="400" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix1x4.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
	</class>
	<abstract path="geom.Matrix2x2" params="" file="src/geom/Matrix2x2.hx">
		<from>
			<icast><c path="geom.structure.Mat2x2"/></icast>
			<icast field="from3x3"><x path="geom.Matrix3x3"/></icast>
			<icast field="from4x3"><x path="geom.Matrix4x3"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="geom.structure.Mat2x2"/></this>
		<to>
			<icast><c path="geom.structure.Mat2x2"/></icast>
			<icast field="to3x3"><x path="geom.Matrix3x3"/></icast>
			<icast field="to4x3"><x path="geom.Matrix4x3"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Matrix2x2.Matrix2x2_Impl_" params="" file="src/geom/Matrix2x2.hx" private="1" module="geom.Matrix2x2">
	<_new public="1" get="inline" set="null" line="4" static="1">
		<f a="m">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<clone public="1" get="inline" set="null" line="6" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</clone>
	<create public="1" get="inline" set="null" line="11" static="1">
		<f a="this:a:b:c:d">
			<c path="geom.structure.Mat2x2"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</create>
	<zero public="1" get="inline" set="null" line="22" static="1">
		<f a=""><x path="geom.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.zero() == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="32" static="1">
		<f a=""><x path="geom.Matrix2x2"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.unit() == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )
     * </code></pre>]]></haxe_doc>
	</unit>
	<scale public="1" get="inline" set="null" line="42" static="1">
		<f a="p">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )
     * </code></pre>]]></haxe_doc>
	</scale>
	<rotation public="1" get="inline" set="null" line="52" static="1">
		<f a="alpha">
			<x path="Float"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
	</rotation>
	<transpose public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
	</transpose>
	<add public="1" get="inline" set="null" line="75" static="1">
		<f a="m0:m1">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<equal public="1" get="inline" set="null" line="89" static="1">
		<f a="a:b">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="107" static="1">
		<f a="a:b">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<sub public="1" get="inline" set="null" line="119" static="1">
		<f a="m0:m1">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a - a == Matrix2x2.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<multiplyValue public="1" get="inline" set="null" line="124" static="1">
		<f a="v:m">
			<x path="Float"/>
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyValue>
	<scaleMultiply public="1" get="inline" set="null" line="129" static="1">
		<f a="p:m">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply>
	<multiply public="1" get="inline" set="null" line="134" static="1">
		<f a="a2:b2">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<multiplyPoint public="1" get="inline" set="null" line="139" static="1">
		<f a="this:p">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix1x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</multiplyPoint>
	<det public="1" get="inline" set="null" line="145" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</det>
	<inverse public="1" get="inline" set="null" line="149" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<to3x3 public="1" get="inline" set="null" line="160" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to3x3>
	<to4x3 public="1" get="inline" set="null" line="166" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to4x3>
	<from3x3 public="1" get="inline" set="null" line="172" static="1">
		<f a="m3">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</from3x3>
	<from4x3 public="1" get="inline" set="null" line="177" static="1">
		<f a="m4">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</from4x3>
	<fromArr public="1" get="inline" set="null" line="182" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="187" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromVec public="1" get="inline" set="null" line="192" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="197" static="1">
		<f a="this">
			<c path="geom.structure.Mat2x2"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="204" static="1">
		<f a="this:x:y:v">
			<c path="geom.structure.Mat2x2"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setXY>
	<getXY public="1" get="inline" set="null" line="210" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat2x2"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getXY>
</class></impl>
	</abstract>
	<class path="geom._Matrix2x2.Matrix2x2_Impl_" params="" file="src/geom/Matrix2x2.hx" private="1" module="geom.Matrix2x2">
		<_new public="1" get="inline" set="null" line="4" static="1">
			<f a="m">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<clone public="1" get="inline" set="null" line="6" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</clone>
		<create public="1" get="inline" set="null" line="11" static="1">
			<f a="this:a:b:c:d">
				<c path="geom.structure.Mat2x2"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</create>
		<zero public="1" get="inline" set="null" line="22" static="1">
			<f a=""><x path="geom.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.zero() == new Matrix2x2( { a: 0., b: 0., c: 0., d: 0. } )
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="32" static="1">
			<f a=""><x path="geom.Matrix2x2"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.unit() == new Matrix2x2( { a: 1., b: 0., c: 0., d: 1. } )
     * </code></pre>]]></haxe_doc>
		</unit>
		<scale public="1" get="inline" set="null" line="42" static="1">
			<f a="p">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Matrix2x2.scale( new Matrix1x2( { x: 2., y: 2. } ) ) == new Matrix2x2( { a: 2., b: 0., c: 0.,  d: 2. } )
     * </code></pre>]]></haxe_doc>
		</scale>
		<rotation public="1" get="inline" set="null" line="52" static="1">
			<f a="alpha">
				<x path="Float"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
		</rotation>
		<transpose public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> 
     * </code></pre>]]></haxe_doc>
		</transpose>
		<add public="1" get="inline" set="null" line="75" static="1">
			<f a="m0:m1">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a + a == new Matrix2x2({ a: 2., b: 0., c: 0., d: 2. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<equal public="1" get="inline" set="null" line="89" static="1">
			<f a="a:b">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 3., d: 4. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="107" static="1">
			<f a="a:b">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix2x2({ a: 1., b: 2., c: 3., d: 1. });
     * ... var b = new Matrix2x2({ a: 1., b: 2., c: 4., d: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<sub public="1" get="inline" set="null" line="119" static="1">
			<f a="m0:m1">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... var a = Matrix2x2.unit();
     * ... a - a == Matrix2x2.zero();
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<multiplyValue public="1" get="inline" set="null" line="124" static="1">
			<f a="v:m">
				<x path="Float"/>
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyValue>
		<scaleMultiply public="1" get="inline" set="null" line="129" static="1">
			<f a="p:m">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply>
		<multiply public="1" get="inline" set="null" line="134" static="1">
			<f a="a2:b2">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<multiplyPoint public="1" get="inline" set="null" line="139" static="1">
			<f a="this:p">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix1x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</multiplyPoint>
		<det public="1" get="inline" set="null" line="145" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</det>
		<inverse public="1" get="inline" set="null" line="149" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<to3x3 public="1" get="inline" set="null" line="160" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to3x3>
		<to4x3 public="1" get="inline" set="null" line="166" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to4x3>
		<from3x3 public="1" get="inline" set="null" line="172" static="1">
			<f a="m3">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</from3x3>
		<from4x3 public="1" get="inline" set="null" line="177" static="1">
			<f a="m4">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</from4x3>
		<fromArr public="1" get="inline" set="null" line="182" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="187" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromVec public="1" get="inline" set="null" line="192" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="197" static="1">
			<f a="this">
				<c path="geom.structure.Mat2x2"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="204" static="1">
			<f a="this:x:y:v">
				<c path="geom.structure.Mat2x2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setXY>
		<getXY public="1" get="inline" set="null" line="210" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat2x2"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getXY>
	</class>
	<abstract path="geom.Matrix3x3" params="" file="src/geom/Matrix3x3.hx">
		<from>
			<icast><c path="geom.structure.Mat3x3"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="from2x2"><x path="geom.Matrix2x2"/></icast>
			<icast field="from4x3"><x path="geom.Matrix4x3"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</from>
		<this><c path="geom.structure.Mat3x3"/></this>
		<to>
			<icast><c path="geom.structure.Mat3x3"/></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="to2x2"><x path="geom.Matrix2x2"/></icast>
			<icast field="to4x3"><x path="geom.Matrix4x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Matrix3x3.Matrix3x3_Impl_" params="" file="src/geom/Matrix3x3.hx" private="1" module="geom.Matrix3x3">
	<_new public="1" get="inline" set="null" line="6" static="1">
		<f a="m">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="17" static="1">
		<f a=""><x path="geom.Matrix3x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.zero() == new Matrix3x3( { a: 0., b: 0., c: 0.
     * ...                                    , d: 0., e: 0., f: 0.
     * ...                                    , g: 0., h: 0., i: 0. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="32" static="1">
		<f a=""><x path="geom.Matrix3x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix3x3.unit() == new Matrix3x3({ a: 1., b: 0., c: 0.
     * ...                                  , d: 0., e: 1., f: 0.
     * ...                                  , g: 0., h: 0., i: 1. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<radianX public="1" get="inline" set="null" line="38" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></radianX>
	<rotateX public="1" get="inline" set="null" line="46" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateX>
	<radianY public="1" get="inline" set="null" line="48" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></radianY>
	<rotateY public="1" get="inline" set="null" line="56" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateY>
	<radianZ public="1" get="inline" set="null" line="58" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></radianZ>
	<rotateZ public="1" get="inline" set="null" line="66" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateZ>
	<rotate public="1" get="inline" set="null" line="68" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotate>
	<xShear public="1" get="inline" set="null" line="70" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></xShear>
	<shearX public="1" get="inline" set="null" line="77" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</shearX>
	<yShear public="1" get="inline" set="null" line="79" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></yShear>
	<shearY public="1" get="inline" set="null" line="85" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</shearY>
	<xFlip public="1" get="inline" set="null" line="87" static="1"><f a=""><x path="geom.Matrix3x3"/></f></xFlip>
	<flipX public="1" get="inline" set="null" line="93" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</flipX>
	<yFlip public="1" get="inline" set="null" line="95" static="1"><f a=""><x path="geom.Matrix3x3"/></f></yFlip>
	<flipY public="1" get="inline" set="null" line="101" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</flipY>
	<xyFlip public="1" get="inline" set="null" line="103" static="1"><f a=""><x path="geom.Matrix3x3"/></f></xyFlip>
	<flipXY public="1" get="inline" set="null" line="109" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</flipXY>
	<sxyz public="1" get="inline" set="null" line="111" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sxyz>
	<scaleXYZ public="1" get="inline" set="null" line="117" static="1">
		<f a="this:x:y:z">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleXYZ>
	<sx public="1" get="inline" set="null" line="119" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sx>
	<scaleX public="1" get="inline" set="null" line="125" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleX>
	<sy public="1" get="inline" set="null" line="127" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sy>
	<scaleY public="1" get="inline" set="null" line="133" static="1">
		<f a="this:y">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleY>
	<sz public="1" get="inline" set="null" line="135" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sz>
	<scaleZ public="1" get="inline" set="null" line="141" static="1">
		<f a="this:z">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleZ>
	<scale public="1" get="inline" set="null" line="145" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scale>
	<scale2D public="1" get="inline" set="null" line="149" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scale2D>
	<tx public="1" get="inline" set="null" line="155" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></tx>
	<translateX public="1" get="inline" set="null" line="161" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateX>
	<ty public="1" get="inline" set="null" line="165" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></ty>
	<txy public="1" get="inline" set="null" line="171" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></txy>
	<translateXY public="1" get="inline" set="null" line="177" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateXY>
	<add public="1" get="inline" set="null" line="181" static="1">
		<f a="m0:m1">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add>
	<subtract public="1" get="inline" set="null" line="187" static="1">
		<f a="m0:m1">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</subtract>
	<scaleMultiply4D public="1" get="inline" set="null" line="193" static="1">
		<f a="p:m">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply4D>
	<scaleMultiply2D public="1" get="inline" set="null" line="199" static="1">
		<f a="p:m">
			<x path="geom.Matrix1x2"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply2D>
	<scaleMultiply3D public="1" get="inline" set="null" line="205" static="1">
		<f a="p:m">
			<t path="geom.tydef.Tmatrix1x3"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply3D>
	<multiplyV public="1" get="inline" set="null" line="211" static="1">
		<f a="v:m">
			<x path="Float"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiplyV>
	<multiply public="1" get="inline" set="null" line="217" static="1">
		<f a="p:q">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<equal public="1" get="inline" set="null" line="233" static="1">
		<f a="a:b">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="256" static="1">
		<f a="a:b">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix3x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<cofactor public="1" get="inline" set="null" line="260" static="1">
		<f a="this:a:b:c:d">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cofactor>
	<det public="1" get="inline" set="null" line="264" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</det>
	<inverse public="1" get="inline" set="null" line="270" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<fromArr public="1" get="inline" set="null" line="283" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="289" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<to2x2 public="1" get="inline" set="null" line="295" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to2x2>
	<to3D public="1" get="inline" set="null" line="301" static="1"><f a="m2">
	<x path="geom.Matrix2x2"/>
	<x path="geom.Matrix3x3"/>
</f></to3D>
	<from2x2 public="1" get="inline" set="null" line="308" static="1">
		<f a="m2">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2x2>
	<to4x3 public="1" get="inline" set="null" line="314" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to4x3>
	<from4x3 public="1" get="inline" set="null" line="320" static="1">
		<f a="m4">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from4x3>
	<fromVec public="1" get="inline" set="null" line="326" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="332" static="1">
		<f a="this">
			<c path="geom.structure.Mat3x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="340" static="1">
		<f a="this:x:y:v">
			<c path="geom.structure.Mat3x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setXY>
	<getXY public="1" get="inline" set="null" line="347" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat3x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getXY>
</class></impl>
	</abstract>
	<class path="geom._Matrix3x3.Matrix3x3_Impl_" params="" file="src/geom/Matrix3x3.hx" private="1" module="geom.Matrix3x3">
		<_new public="1" get="inline" set="null" line="6" static="1">
			<f a="m">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="17" static="1">
			<f a=""><x path="geom.Matrix3x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix3x3.zero() == new Matrix3x3( { a: 0., b: 0., c: 0.
     * ...                                    , d: 0., e: 0., f: 0.
     * ...                                    , g: 0., h: 0., i: 0. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="32" static="1">
			<f a=""><x path="geom.Matrix3x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix3x3.unit() == new Matrix3x3({ a: 1., b: 0., c: 0.
     * ...                                  , d: 0., e: 1., f: 0.
     * ...                                  , g: 0., h: 0., i: 1. });
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<radianX public="1" get="inline" set="null" line="38" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></radianX>
		<rotateX public="1" get="inline" set="null" line="46" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateX>
		<radianY public="1" get="inline" set="null" line="48" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></radianY>
		<rotateY public="1" get="inline" set="null" line="56" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateY>
		<radianZ public="1" get="inline" set="null" line="58" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></radianZ>
		<rotateZ public="1" get="inline" set="null" line="66" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateZ>
		<rotate public="1" get="inline" set="null" line="68" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotate>
		<xShear public="1" get="inline" set="null" line="70" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></xShear>
		<shearX public="1" get="inline" set="null" line="77" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</shearX>
		<yShear public="1" get="inline" set="null" line="79" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></yShear>
		<shearY public="1" get="inline" set="null" line="85" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</shearY>
		<xFlip public="1" get="inline" set="null" line="87" static="1"><f a=""><x path="geom.Matrix3x3"/></f></xFlip>
		<flipX public="1" get="inline" set="null" line="93" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</flipX>
		<yFlip public="1" get="inline" set="null" line="95" static="1"><f a=""><x path="geom.Matrix3x3"/></f></yFlip>
		<flipY public="1" get="inline" set="null" line="101" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</flipY>
		<xyFlip public="1" get="inline" set="null" line="103" static="1"><f a=""><x path="geom.Matrix3x3"/></f></xyFlip>
		<flipXY public="1" get="inline" set="null" line="109" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</flipXY>
		<sxyz public="1" get="inline" set="null" line="111" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sxyz>
		<scaleXYZ public="1" get="inline" set="null" line="117" static="1">
			<f a="this:x:y:z">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleXYZ>
		<sx public="1" get="inline" set="null" line="119" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sx>
		<scaleX public="1" get="inline" set="null" line="125" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleX>
		<sy public="1" get="inline" set="null" line="127" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sy>
		<scaleY public="1" get="inline" set="null" line="133" static="1">
			<f a="this:y">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleY>
		<sz public="1" get="inline" set="null" line="135" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></sz>
		<scaleZ public="1" get="inline" set="null" line="141" static="1">
			<f a="this:z">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleZ>
		<scale public="1" get="inline" set="null" line="145" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scale>
		<scale2D public="1" get="inline" set="null" line="149" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scale2D>
		<tx public="1" get="inline" set="null" line="155" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></tx>
		<translateX public="1" get="inline" set="null" line="161" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateX>
		<ty public="1" get="inline" set="null" line="165" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></ty>
		<txy public="1" get="inline" set="null" line="171" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix3x3"/>
</f></txy>
		<translateXY public="1" get="inline" set="null" line="177" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateXY>
		<add public="1" get="inline" set="null" line="181" static="1">
			<f a="m0:m1">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add>
		<subtract public="1" get="inline" set="null" line="187" static="1">
			<f a="m0:m1">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</subtract>
		<scaleMultiply4D public="1" get="inline" set="null" line="193" static="1">
			<f a="p:m">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply4D>
		<scaleMultiply2D public="1" get="inline" set="null" line="199" static="1">
			<f a="p:m">
				<x path="geom.Matrix1x2"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply2D>
		<scaleMultiply3D public="1" get="inline" set="null" line="205" static="1">
			<f a="p:m">
				<t path="geom.tydef.Tmatrix1x3"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply3D>
		<multiplyV public="1" get="inline" set="null" line="211" static="1">
			<f a="v:m">
				<x path="Float"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiplyV>
		<multiply public="1" get="inline" set="null" line="217" static="1">
			<f a="p:q">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<equal public="1" get="inline" set="null" line="233" static="1">
			<f a="a:b">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="256" static="1">
			<f a="a:b">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix3x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9. });
     * ... var b = new Matrix3x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 8. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<cofactor public="1" get="inline" set="null" line="260" static="1">
			<f a="this:a:b:c:d">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cofactor>
		<det public="1" get="inline" set="null" line="264" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</det>
		<inverse public="1" get="inline" set="null" line="270" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<fromArr public="1" get="inline" set="null" line="283" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="289" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<to2x2 public="1" get="inline" set="null" line="295" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to2x2>
		<to3D public="1" get="inline" set="null" line="301" static="1"><f a="m2">
	<x path="geom.Matrix2x2"/>
	<x path="geom.Matrix3x3"/>
</f></to3D>
		<from2x2 public="1" get="inline" set="null" line="308" static="1">
			<f a="m2">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2x2>
		<to4x3 public="1" get="inline" set="null" line="314" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to4x3>
		<from4x3 public="1" get="inline" set="null" line="320" static="1">
			<f a="m4">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from4x3>
		<fromVec public="1" get="inline" set="null" line="326" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="332" static="1">
			<f a="this">
				<c path="geom.structure.Mat3x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="340" static="1">
			<f a="this:x:y:v">
				<c path="geom.structure.Mat3x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setXY>
		<getXY public="1" get="inline" set="null" line="347" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat3x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getXY>
	</class>
	<abstract path="geom.Matrix4x3" params="" file="src/geom/Matrix4x3.hx">
		<from>
			<icast><c path="geom.structure.Mat4x3"/></icast>
			<icast field="fromNumbered"><t path="geom.tydef.Tmatrix4x4numbered"/></icast>
			<icast field="fromArr"><c path="Array"><x path="Float"/></c></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="from2x2"><x path="geom.Matrix2x2"/></icast>
			<icast field="from3x3"><x path="geom.Matrix3x3"/></icast>
		</from>
		<this><c path="geom.structure.Mat4x3"/></this>
		<to>
			<icast><c path="geom.structure.Mat4x3"/></icast>
			<icast field="toAffineMatrix"><a>
	<e9><x path="Float"/></e9>
	<e8><x path="Float"/></e8>
	<e6><x path="Float"/></e6>
	<e5><x path="Float"/></e5>
	<e4><x path="Float"/></e4>
	<e2><x path="Float"/></e2>
	<e14><x path="Float"/></e14>
	<e13><x path="Float"/></e13>
	<e12><x path="Float"/></e12>
	<e10><x path="Float"/></e10>
	<e1><x path="Float"/></e1>
	<e0><x path="Float"/></e0>
</a></icast>
			<icast field="toNumbered"><a>
	<_33><x path="Float"/></_33>
	<_32><x path="Float"/></_32>
	<_31><x path="Float"/></_31>
	<_30><x path="Float"/></_30>
	<_23><x path="Float"/></_23>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_13><x path="Float"/></_13>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_03><x path="Float"/></_03>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
			<icast field="to2x2"><x path="geom.Matrix2x2"/></icast>
			<icast field="to3x3"><x path="geom.Matrix3x3"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Matrix4x3.Matrix4x3_Impl_" params="" file="src/geom/Matrix4x3.hx" private="1" module="geom.Matrix4x3">
	<_new public="1" get="inline" set="null" line="12" static="1">
		<f a="m">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="23" static="1">
		<f a=""><x path="geom.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.zero() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="38" static="1">
		<f a=""><x path="geom.Matrix4x3"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.unit() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</unit>
	<radianX public="1" get="inline" set="null" line="44" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></radianX>
	<rotateX public="1" get="inline" set="null" line="51" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateX>
	<radianY public="1" get="inline" set="null" line="53" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></radianY>
	<rotateY public="1" get="inline" set="null" line="60" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateY>
	<radianZ public="1" get="inline" set="null" line="62" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></radianZ>
	<rotateZ public="1" get="inline" set="null" line="69" static="1">
		<f a="this:theta">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</rotateZ>
	<sxyz public="1" get="inline" set="null" line="71" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sxyz>
	<scaleXYZ public="1" get="inline" set="null" line="77" static="1">
		<f a="this:x:y:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleXYZ>
	<sx public="1" get="inline" set="null" line="79" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sx>
	<scaleX public="1" get="inline" set="null" line="85" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleX>
	<sy public="1" get="inline" set="null" line="87" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sy>
	<scaleY public="1" get="inline" set="null" line="93" static="1">
		<f a="this:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleY>
	<sz public="1" get="inline" set="null" line="95" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sz>
	<scaleZ public="1" get="inline" set="null" line="101" static="1">
		<f a="this:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scaleZ>
	<scale public="1" get="inline" set="null" line="103" static="1">
		<f a="this:s">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</scale>
	<txyz public="1" get="inline" set="null" line="105" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></txyz>
	<translateXYZ public="1" get="inline" set="null" line="111" static="1">
		<f a="this:x:y:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateXYZ>
	<tx public="1" get="inline" set="null" line="113" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></tx>
	<translateX public="1" get="inline" set="null" line="119" static="1">
		<f a="this:x">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateX>
	<ty public="1" get="inline" set="null" line="121" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></ty>
	<translateY public="1" get="inline" set="null" line="127" static="1">
		<f a="this:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateY>
	<tz public="1" get="inline" set="null" line="129" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></tz>
	<translateZ public="1" get="inline" set="null" line="135" static="1">
		<f a="this:z">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateZ>
	<txy public="1" get="inline" set="null" line="137" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></txy>
	<translateXY public="1" get="inline" set="null" line="143" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</translateXY>
	<equal public="1" get="inline" set="null" line="154" static="1">
		<f a="a:b">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="180" static="1">
		<f a="a:b">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<add public="1" get="inline" set="null" line="193" static="1">
		<f a="m0:m1">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. } ); }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<sub public="1" get="inline" set="null" line="206" static="1">
		<f a="m0:m1">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a - a == Matrix4x3.zero(); }) == true
     * </code></pre>]]></haxe_doc>
	</sub>
	<scaleMultiply1 public="1" get="inline" set="null" line="212" static="1">
		<f a="p:m">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply1>
	<scaleMultiply2 public="1" get="inline" set="null" line="218" static="1">
		<f a="m:p">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply2>
	<scaleDivide public="1" get="inline" set="null" line="224" static="1">
		<f a="m:p">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</scaleDivide>
	<multiply public="1" get="inline" set="null" line="231" static="1">
		<f a="r:s">
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</multiply>
	<cofactor public="1" get="inline" set="null" line="243" static="1">
		<f a="this:a:b:c:d:e:f:g:h:i">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cofactor>
	<det public="1" get="inline" set="null" line="249" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</det>
	<inverse public="1" get="inline" set="null" line="266" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</inverse>
	<projectionWindow public="1" get="inline" set="null" line="297" static="1"><f a="wid:hi:fov">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></projectionWindow>
	<orientation public="1" get="inline" set="null" line="306" static="1"><f a="pos:dir:up">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix4x3"/>
</f></orientation>
	<applyRotation public="1" get="inline" set="null" line="313" static="1">
		<f a="this:p">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</applyRotation>
	<applyInverseRotation public="1" get="inline" set="null" line="320" static="1">
		<f a="this:p">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</applyInverseRotation>
	<orthonormalizeRotation public="1" get="inline" set="null" line="327" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<c path="geom.structure.Mat4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</orthonormalizeRotation>
	<makeViewFromOrientation public="1" get="inline" set="null" line="337" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</makeViewFromOrientation>
	<invertNormalizedRotation public="1" get="inline" set="null" line="344" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invertNormalizedRotation>
	<invertNormalized public="1" get="inline" set="null" line="350" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":impl"/></meta>
	</invertNormalized>
	<toAffineMatrix public="1" get="inline" set="null" line="358" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<t path="geom.tydef.TAffineMatrix"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toAffineMatrix>
	<fromNumbered public="1" get="inline" set="null" line="365" static="1">
		<f a="m">
			<t path="geom.tydef.Tmatrix4x4numbered"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromNumbered>
	<toNumbered public="1" get="inline" set="null" line="372" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<t path="geom.tydef.Tmatrix4x4numbered"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toNumbered>
	<fromArr public="1" get="inline" set="null" line="380" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromArr>
	<toArray public="1" get="inline" set="null" line="387" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toArray>
	<fromVec public="1" get="inline" set="null" line="394" static="1">
		<f a="v">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</fromVec>
	<from2x2 public="1" get="inline" set="null" line="401" static="1">
		<f a="m2">
			<x path="geom.Matrix2x2"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from2x2>
	<to2x2 public="1" get="inline" set="null" line="408" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix2x2"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to2x2>
	<from3x3 public="1" get="inline" set="null" line="414" static="1">
		<f a="m3">
			<x path="geom.Matrix3x3"/>
			<x path="geom.Matrix4x3"/>
		</f>
		<meta><m n=":from"/></meta>
	</from3x3>
	<to3x3 public="1" get="inline" set="null" line="421" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="geom.Matrix3x3"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</to3x3>
	<toVector public="1" get="inline" set="null" line="428" static="1">
		<f a="this">
			<c path="geom.structure.Mat4x3"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toVector>
	<setXY public="1" get="inline" set="null" line="436" static="1">
		<f a="this:x:y:v">
			<c path="geom.structure.Mat4x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</setXY>
	<getXY public="1" get="inline" set="null" line="443" static="1">
		<f a="this:x:y">
			<c path="geom.structure.Mat4x3"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getXY>
	<toFloat32Array public="1" get="inline" set="null" line="451" static="1">
		<f a="this:arr">
			<c path="geom.structure.Mat4x3"/>
			<t path="js.html.Float32Array"/>
			<t path="js.html.Float32Array"/>
		</f>
		<meta><m n=":impl"/></meta>
	</toFloat32Array>
</class></impl>
	</abstract>
	<class path="geom._Matrix4x3.Matrix4x3_Impl_" params="" file="src/geom/Matrix4x3.hx" private="1" module="geom.Matrix4x3">
		<_new public="1" get="inline" set="null" line="12" static="1">
			<f a="m">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="23" static="1">
			<f a=""><x path="geom.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({
     * ... Matrix4x3.zero() == new Matrix4x3({ a: 0., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 0., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 0., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="38" static="1">
			<f a=""><x path="geom.Matrix4x3"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... Matrix4x3.unit() == new Matrix4x3({ a: 1., b: 0., c: 0., d: 0.
     * ...                                   , e: 0., f: 1., g: 0., h: 0.
     * ...                                   , i: 0., j: 0., k: 1., l: 0. } );
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</unit>
		<radianX public="1" get="inline" set="null" line="44" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></radianX>
		<rotateX public="1" get="inline" set="null" line="51" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateX>
		<radianY public="1" get="inline" set="null" line="53" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></radianY>
		<rotateY public="1" get="inline" set="null" line="60" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateY>
		<radianZ public="1" get="inline" set="null" line="62" static="1"><f a="theta">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></radianZ>
		<rotateZ public="1" get="inline" set="null" line="69" static="1">
			<f a="this:theta">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</rotateZ>
		<sxyz public="1" get="inline" set="null" line="71" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sxyz>
		<scaleXYZ public="1" get="inline" set="null" line="77" static="1">
			<f a="this:x:y:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleXYZ>
		<sx public="1" get="inline" set="null" line="79" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sx>
		<scaleX public="1" get="inline" set="null" line="85" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleX>
		<sy public="1" get="inline" set="null" line="87" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sy>
		<scaleY public="1" get="inline" set="null" line="93" static="1">
			<f a="this:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleY>
		<sz public="1" get="inline" set="null" line="95" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></sz>
		<scaleZ public="1" get="inline" set="null" line="101" static="1">
			<f a="this:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scaleZ>
		<scale public="1" get="inline" set="null" line="103" static="1">
			<f a="this:s">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</scale>
		<txyz public="1" get="inline" set="null" line="105" static="1"><f a="x:y:z">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></txyz>
		<translateXYZ public="1" get="inline" set="null" line="111" static="1">
			<f a="this:x:y:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateXYZ>
		<tx public="1" get="inline" set="null" line="113" static="1"><f a="x">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></tx>
		<translateX public="1" get="inline" set="null" line="119" static="1">
			<f a="this:x">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateX>
		<ty public="1" get="inline" set="null" line="121" static="1"><f a="y">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></ty>
		<translateY public="1" get="inline" set="null" line="127" static="1">
			<f a="this:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateY>
		<tz public="1" get="inline" set="null" line="129" static="1"><f a="z">
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></tz>
		<translateZ public="1" get="inline" set="null" line="135" static="1">
			<f a="this:z">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateZ>
		<txy public="1" get="inline" set="null" line="137" static="1"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></txy>
		<translateXY public="1" get="inline" set="null" line="143" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</translateXY>
		<equal public="1" get="inline" set="null" line="154" static="1">
			<f a="a:b">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="180" static="1">
			<f a="a:b">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:12. });
     * ... var b = new Matrix4x3({ a: 1., b: 2., c: 3., d: 4., e: 5., f: 6., g: 7., h: 8., i: 9., j:10., k:11., l:11. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<add public="1" get="inline" set="null" line="193" static="1">
			<f a="m0:m1">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a + a == new Matrix4x3( { a: 2., b: 0., c: 0., d: 0.
     * ...                         , e: 0., f: 2., g: 0., h: 0.
     * ...                         , i: 0., j: 0., k: 2., l: 0. } ); }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<sub public="1" get="inline" set="null" line="206" static="1">
			<f a="m0:m1">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Matrix4x3.unit();
     * ... a - a == Matrix4x3.zero(); }) == true
     * </code></pre>]]></haxe_doc>
		</sub>
		<scaleMultiply1 public="1" get="inline" set="null" line="212" static="1">
			<f a="p:m">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply1>
		<scaleMultiply2 public="1" get="inline" set="null" line="218" static="1">
			<f a="m:p">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply2>
		<scaleDivide public="1" get="inline" set="null" line="224" static="1">
			<f a="m:p">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</scaleDivide>
		<multiply public="1" get="inline" set="null" line="231" static="1">
			<f a="r:s">
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</multiply>
		<cofactor public="1" get="inline" set="null" line="243" static="1">
			<f a="this:a:b:c:d:e:f:g:h:i">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cofactor>
		<det public="1" get="inline" set="null" line="249" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</det>
		<inverse public="1" get="inline" set="null" line="266" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</inverse>
		<projectionWindow public="1" get="inline" set="null" line="297" static="1"><f a="wid:hi:fov">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="geom.Matrix4x3"/>
</f></projectionWindow>
		<orientation public="1" get="inline" set="null" line="306" static="1"><f a="pos:dir:up">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix4x3"/>
</f></orientation>
		<applyRotation public="1" get="inline" set="null" line="313" static="1">
			<f a="this:p">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</applyRotation>
		<applyInverseRotation public="1" get="inline" set="null" line="320" static="1">
			<f a="this:p">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</applyInverseRotation>
		<orthonormalizeRotation public="1" get="inline" set="null" line="327" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<c path="geom.structure.Mat4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</orthonormalizeRotation>
		<makeViewFromOrientation public="1" get="inline" set="null" line="337" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</makeViewFromOrientation>
		<invertNormalizedRotation public="1" get="inline" set="null" line="344" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invertNormalizedRotation>
		<invertNormalized public="1" get="inline" set="null" line="350" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":impl"/></meta>
		</invertNormalized>
		<toAffineMatrix public="1" get="inline" set="null" line="358" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<t path="geom.tydef.TAffineMatrix"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toAffineMatrix>
		<fromNumbered public="1" get="inline" set="null" line="365" static="1">
			<f a="m">
				<t path="geom.tydef.Tmatrix4x4numbered"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromNumbered>
		<toNumbered public="1" get="inline" set="null" line="372" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<t path="geom.tydef.Tmatrix4x4numbered"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toNumbered>
		<fromArr public="1" get="inline" set="null" line="380" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromArr>
		<toArray public="1" get="inline" set="null" line="387" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toArray>
		<fromVec public="1" get="inline" set="null" line="394" static="1">
			<f a="v">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</fromVec>
		<from2x2 public="1" get="inline" set="null" line="401" static="1">
			<f a="m2">
				<x path="geom.Matrix2x2"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from2x2>
		<to2x2 public="1" get="inline" set="null" line="408" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix2x2"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to2x2>
		<from3x3 public="1" get="inline" set="null" line="414" static="1">
			<f a="m3">
				<x path="geom.Matrix3x3"/>
				<x path="geom.Matrix4x3"/>
			</f>
			<meta><m n=":from"/></meta>
		</from3x3>
		<to3x3 public="1" get="inline" set="null" line="421" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="geom.Matrix3x3"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</to3x3>
		<toVector public="1" get="inline" set="null" line="428" static="1">
			<f a="this">
				<c path="geom.structure.Mat4x3"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toVector>
		<setXY public="1" get="inline" set="null" line="436" static="1">
			<f a="this:x:y:v">
				<c path="geom.structure.Mat4x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</setXY>
		<getXY public="1" get="inline" set="null" line="443" static="1">
			<f a="this:x:y">
				<c path="geom.structure.Mat4x3"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getXY>
		<toFloat32Array public="1" get="inline" set="null" line="451" static="1">
			<f a="this:arr">
				<c path="geom.structure.Mat4x3"/>
				<t path="js.html.Float32Array"/>
				<t path="js.html.Float32Array"/>
			</f>
			<meta><m n=":impl"/></meta>
		</toFloat32Array>
	</class>
	<abstract path="geom.Quaternion" params="" file="src/geom/Quaternion.hx">
		<from>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="fromVec"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="fromArray"><c path="Array"><x path="Float"/></c></icast>
		</from>
		<this><c path="geom.structure.Mat1x4"/></this>
		<to>
			<icast><c path="geom.structure.Mat1x4"/></icast>
			<icast field="toMatrix4x1"><x path="geom.Matrix1x4"/></icast>
			<icast field="toVector"><x path="haxe.ds.Vector"><x path="Float"/></x></icast>
			<icast field="toArray"><c path="Array"><x path="Float"/></c></icast>
		</to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Quaternion.Quaternion_Impl_" params="" file="src/geom/Quaternion.hx" private="1" module="geom.Quaternion">
	<_new public="1" get="inline" set="null" line="7" static="1">
		<f a="m">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<zero public="1" get="inline" set="null" line="14" static="1">
		<f a=""><x path="geom.Quaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zero() == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
	</zero>
	<unit public="1" get="inline" set="null" line="23" static="1">
		<f a=""><x path="geom.Quaternion"/></f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.unit() == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</unit>
	<identity public="1" get="inline" set="null" line="33" static="1">
		<f a="out">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.identity( Quaternion.zero() ) == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
	</identity>
	<toMatrix4x1 public="1" get="inline" set="null" line="41" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
	</toMatrix4x1>
	<copy public="1" get="inline" set="null" line="54" static="1">
		<f a="pin:pout">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Quaternion.zero();
     * ... var c = Quaternion.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
	</copy>
	<getTPoint public="1" get="inline" set="null" line="62" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</getTPoint>
	<magnitude public="1" get="accessor" set="accessor" static="1">
		<x path="Float"/>
		<meta><m n=":impl"/></meta>
	</magnitude>
	<get_magnitude get="inline" set="null" line="67" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_magnitude>
	<set_magnitude get="inline" set="null" line="71" static="1">
		<f a="this:length">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_magnitude>
	<equal public="1" get="inline" set="null" line="93" static="1">
		<f a="a:b">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A == B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</equal>
	<notEqual public="1" get="inline" set="null" line="111" static="1">
		<f a="a:b">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":op"><e>A != B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
	</notEqual>
	<magnitudeSquared public="1" get="inline" set="null" line="115" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="Float"/>
		</f>
		<meta><m n=":impl"/></meta>
	</magnitudeSquared>
	<add public="1" get="inline" set="null" line="127" static="1">
		<f a="a:b">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</add>
	<subtract public="1" get="inline" set="null" line="139" static="1">
		<f a="a:b">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a - a == Quaternion.zero(); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
	</subtract>
	<dot public="1" get="inline" set="null" line="143" static="1">
		<f a="a:b">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</dot>
	<dotProduct public="1" get="inline" set="null" line="147" static="1"><f a="a:b">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="Float"/>
</f></dotProduct>
	<scaleMultiply public="1" get="inline" set="null" line="151" static="1">
		<f a="a:v">
			<x path="geom.Quaternion"/>
			<x path="Float"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta>
			<m n=":op"><e>A * B</e></m>
			<m n=":commutative"/>
		</meta>
	</scaleMultiply>
	<divide public="1" get="inline" set="null" line="155" static="1">
		<f a="a:v">
			<x path="geom.Quaternion"/>
			<x path="Float"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide>
	<divide2 public="1" get="inline" set="null" line="159" static="1">
		<f a="v:a">
			<x path="Float"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>A / B</e></m></meta>
	</divide2>
	<conjugate public="1" get="inline" set="null" line="171" static="1">
		<f a="a">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>~A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</conjugate>
	<negate public="1" get="inline" set="null" line="187" static="1">
		<f a="a">
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":op"><e>-A</e></m></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
	</negate>
	<multiplyV public="1" get="inline" set="null" line="195" static="1"><f a="a:b:out">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
</f></multiplyV>
	<multiplyQ public="1" get="inline" set="null" line="211" static="1"><f a="q:v:out">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
</f></multiplyQ>
	<cross public="1" get="inline" set="null" line="226" static="1">
		<f a="this:v">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</cross>
	<fromAxisAngle public="1" get="inline" set="null" line="233" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
</f></fromAxisAngle>
	<lerp public="1" get="inline" set="null" line="240" static="1"><f a="a:b:t">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="Float"/>
	<x path="geom.Quaternion"/>
</f></lerp>
	<euler public="1" get="accessor" set="accessor" static="1">
		<x path="geom.Quaternion"/>
		<meta><m n=":impl"/></meta>
	</euler>
	<set_euler get="inline" set="null" line="245" static="1">
		<f a="this:a">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</set_euler>
	<get_euler get="inline" set="null" line="262" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</get_euler>
	<slerp public="1" set="method" line="269" static="1">
		<f a="this:a:b:t">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
			<x path="geom.Quaternion"/>
			<x path="Float"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</slerp>
	<normalize public="1" get="inline" set="null" line="306" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</normalize>
	<constrainDistance public="1" get="inline" set="null" line="311" static="1">
		<f a="this:anchor:distance">
			<c path="geom.structure.Mat1x4"/>
			<x path="geom.Quaternion"/>
			<x path="Float"/>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":impl"/></meta>
	</constrainDistance>
	<fromVec public="1" get="inline" set="null" line="324" static="1">
		<f a="vec">
			<x path="haxe.ds.Vector"><x path="Float"/></x>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Quaternion = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
	</fromVec>
	<toVector public="1" get="inline" set="null" line="338" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<x path="haxe.ds.Vector"><x path="Float"/></x>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
	</toVector>
	<fromArray public="1" get="inline" set="null" line="355" static="1">
		<f a="arr">
			<c path="Array"><x path="Float"/></c>
			<x path="geom.Quaternion"/>
		</f>
		<meta><m n=":from"/></meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Quaternion = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
	</fromArray>
	<toArray public="1" get="inline" set="null" line="367" static="1">
		<f a="this">
			<c path="geom.structure.Mat1x4"/>
			<c path="Array"><x path="Float"/></c>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":to"/>
		</meta>
		<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
	</toArray>
</class></impl>
	</abstract>
	<class path="geom._Quaternion.Quaternion_Impl_" params="" file="src/geom/Quaternion.hx" private="1" module="geom.Quaternion">
		<_new public="1" get="inline" set="null" line="7" static="1">
			<f a="m">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<zero public="1" get="inline" set="null" line="14" static="1">
			<f a=""><x path="geom.Quaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.zero() == new Quaternion({ x: 0., y: 0., z: 0., w: 0. })
     * </code></pre>]]></haxe_doc>
		</zero>
		<unit public="1" get="inline" set="null" line="23" static="1">
			<f a=""><x path="geom.Quaternion"/></f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.unit() == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</unit>
		<identity public="1" get="inline" set="null" line="33" static="1">
			<f a="out">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> Quaternion.identity( Quaternion.zero() ) == new Quaternion({ x: 1., y: 1., z: 1., w: 1. })
     * </code></pre>]]></haxe_doc>
		</identity>
		<toMatrix4x1 public="1" get="inline" set="null" line="41" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
		</toMatrix4x1>
		<copy public="1" get="inline" set="null" line="54" static="1">
			<f a="pin:pout">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = Quaternion.zero();
     * ... var c = Quaternion.copy( a, b ); 
     * ... a == c; }) == true
     * </code></pre>]]></haxe_doc>
		</copy>
		<getTPoint public="1" get="inline" set="null" line="62" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</getTPoint>
		<magnitude public="1" get="accessor" set="accessor" static="1">
			<x path="Float"/>
			<meta><m n=":impl"/></meta>
		</magnitude>
		<get_magnitude get="inline" set="null" line="67" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_magnitude>
		<set_magnitude get="inline" set="null" line="71" static="1">
			<f a="this:length">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_magnitude>
		<equal public="1" get="inline" set="null" line="93" static="1">
			<f a="a:b">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A == B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</equal>
		<notEqual public="1" get="inline" set="null" line="111" static="1">
			<f a="a:b">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":op"><e>A != B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = new Quaternion({ x: 1., y: 2., z: 4., w: 1. });
     * ... a != b; }) == true
     * </code></pre>]]></haxe_doc>
		</notEqual>
		<magnitudeSquared public="1" get="inline" set="null" line="115" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="Float"/>
			</f>
			<meta><m n=":impl"/></meta>
		</magnitudeSquared>
		<add public="1" get="inline" set="null" line="127" static="1">
			<f a="a:b">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a + a == new Quaternion({ x: 2., y: 2., z: 2., w: 2. }); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</add>
		<subtract public="1" get="inline" set="null" line="139" static="1">
			<f a="a:b">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... a - a == Quaternion.zero(); 
     * ... }) == true
     * </code></pre>]]></haxe_doc>
		</subtract>
		<dot public="1" get="inline" set="null" line="143" static="1">
			<f a="a:b">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</dot>
		<dotProduct public="1" get="inline" set="null" line="147" static="1"><f a="a:b">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="Float"/>
</f></dotProduct>
		<scaleMultiply public="1" get="inline" set="null" line="151" static="1">
			<f a="a:v">
				<x path="geom.Quaternion"/>
				<x path="Float"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta>
				<m n=":op"><e>A * B</e></m>
				<m n=":commutative"/>
			</meta>
		</scaleMultiply>
		<divide public="1" get="inline" set="null" line="155" static="1">
			<f a="a:v">
				<x path="geom.Quaternion"/>
				<x path="Float"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide>
		<divide2 public="1" get="inline" set="null" line="159" static="1">
			<f a="v:a">
				<x path="Float"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>A / B</e></m></meta>
		</divide2>
		<conjugate public="1" get="inline" set="null" line="171" static="1">
			<f a="a">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>~A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = ~a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: 1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</conjugate>
		<negate public="1" get="inline" set="null" line="187" static="1">
			<f a="a">
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":op"><e>-A</e></m></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = new Quaternion({ x: 1., y: 2., z: 3., w: 1. });
     * ... var b = -a;
     * ... b == new Quaternion({ x: -1., y: -2., z: -3., w: -1. }); }) == true
     * </code></pre>]]></haxe_doc>
		</negate>
		<multiplyV public="1" get="inline" set="null" line="195" static="1"><f a="a:b:out">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
</f></multiplyV>
		<multiplyQ public="1" get="inline" set="null" line="211" static="1"><f a="q:v:out">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
</f></multiplyQ>
		<cross public="1" get="inline" set="null" line="226" static="1">
			<f a="this:v">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</cross>
		<fromAxisAngle public="1" get="inline" set="null" line="233" static="1"><f a="theta:axis">
	<x path="Float"/>
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
</f></fromAxisAngle>
		<lerp public="1" get="inline" set="null" line="240" static="1"><f a="a:b:t">
	<x path="geom.Quaternion"/>
	<x path="geom.Quaternion"/>
	<x path="Float"/>
	<x path="geom.Quaternion"/>
</f></lerp>
		<euler public="1" get="accessor" set="accessor" static="1">
			<x path="geom.Quaternion"/>
			<meta><m n=":impl"/></meta>
		</euler>
		<set_euler get="inline" set="null" line="245" static="1">
			<f a="this:a">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</set_euler>
		<get_euler get="inline" set="null" line="262" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</get_euler>
		<slerp public="1" set="method" line="269" static="1">
			<f a="this:a:b:t">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
				<x path="geom.Quaternion"/>
				<x path="Float"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</slerp>
		<normalize public="1" get="inline" set="null" line="306" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</normalize>
		<constrainDistance public="1" get="inline" set="null" line="311" static="1">
			<f a="this:anchor:distance">
				<c path="geom.structure.Mat1x4"/>
				<x path="geom.Quaternion"/>
				<x path="Float"/>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":impl"/></meta>
		</constrainDistance>
		<fromVec public="1" get="inline" set="null" line="324" static="1">
			<f a="vec">
				<x path="haxe.ds.Vector"><x path="Float"/></x>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... var c: Quaternion = b;
     * ... a == b; }) == true
     * </code></pre>]]></haxe_doc>
		</fromVec>
		<toVector public="1" get="inline" set="null" line="338" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<x path="haxe.ds.Vector"><x path="Float"/></x>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: haxe.ds.Vector<Float> = a;
     * ... var c = haxe.ds.Vector.fromArrayCopy([ 1., 1., 1., 1. ]);
     * ... Equal.equals( b, c ); }) == true
     * </code></pre>]]></haxe_doc>
		</toVector>
		<fromArray public="1" get="inline" set="null" line="355" static="1">
			<f a="arr">
				<c path="Array"><x path="Float"/></c>
				<x path="geom.Quaternion"/>
			</f>
			<meta><m n=":from"/></meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Quaternion = [ 1., 1., 1., 1. ];
     * ... Equal.equals( a, b ); }) == true
     * </code></pre>]]></haxe_doc>
		</fromArray>
		<toArray public="1" get="inline" set="null" line="367" static="1">
			<f a="this">
				<c path="geom.structure.Mat1x4"/>
				<c path="Array"><x path="Float"/></c>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":to"/>
			</meta>
			<haxe_doc><![CDATA[* <pre><code>
     * >>> ({ 
     * ... var a = Quaternion.unit();
     * ... var b: Array<Float> = a;
     * ... Equal.equals( b, [ 1., 1., 1., 1. ] ); }) == true
     * </code></pre>]]></haxe_doc>
		</toArray>
	</class>
	<class path="geom.Tri" params="" file="src/geom/Tri.hx">
		<sign public="1" get="inline" set="null" line="73" static="1"><f a="n">
	<x path="Float"/>
	<x path="Int"/>
</f></sign>
		<windingAdjusted public="1"><x path="Bool"/></windingAdjusted>
		<ax public="1"><x path="Float"/></ax>
		<bx public="1"><x path="Float"/></bx>
		<cx public="1"><x path="Float"/></cx>
		<ay public="1"><x path="Float"/></ay>
		<by public="1"><x path="Float"/></by>
		<cy public="1"><x path="Float"/></cy>
		<x public="1" get="accessor" set="accessor"><x path="Float"/></x>
		<get_x set="method" line="12"><f a=""><x path="Float"/></f></get_x>
		<set_x set="method" line="15"><f a="x">
	<x path="Float"/>
	<x path="Float"/>
</f></set_x>
		<y public="1" get="accessor" set="accessor"><x path="Float"/></y>
		<get_y set="method" line="23"><f a=""><x path="Float"/></f></get_y>
		<set_y set="method" line="26"><f a="y">
	<x path="Float"/>
	<x path="Float"/>
</f></set_y>
		<right public="1" get="accessor" set="null"><x path="Float"/></right>
		<get_right public="1" set="method" line="34"><f a=""><x path="Float"/></f></get_right>
		<bottom public="1" get="accessor" set="null"><x path="Float"/></bottom>
		<get_bottom public="1" set="method" line="38"><f a=""><x path="Float"/></f></get_bottom>
		<moveDelta set="method" line="41"><f a="dx:dy">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></moveDelta>
		<liteHit public="1" get="inline" set="null" line="67"><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></liteHit>
		<fullHit public="1" set="method" line="78"><f a="px:py">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Bool"/>
</f></fullHit>
		<adjustWinding public="1" set="method" line="82"><f a=""><x path="Bool"/></f></adjustWinding>
		<rotate public="1" get="inline" set="null" line="85"><f a="x:y:theta">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotate>
		<rotateTrig public="1" get="inline" set="null" line="91"><f a="x:y:cos:sin">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></rotateTrig>
		<new public="1" set="method" line="49"><f a="ax_:ay_:bx_:by_:cx_:cy_">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
	</class>
	<abstract path="geom.Tri3D" params="" file="src/geom/Tri3D.hx">
		<from><icast><c path="geom.structure.TriVec"/></icast></from>
		<this><c path="geom.structure.TriVec"/></this>
		<to><icast><c path="geom.structure.TriVec"/></icast></to>
		<meta><m n=":forward"/></meta>
		<impl><class path="geom._Tri3D.Tri3D_Impl_" params="" file="src/geom/Tri3D.hx" private="1" module="geom.Tri3D">
	<_new public="1" set="method" line="4" static="1">
		<f a="tv">
			<c path="geom.structure.TriVec"/>
			<x path="geom.Tri3D"/>
		</f>
		<meta>
			<m n=":impl"/>
			<m n=":noCompletion"/>
		</meta>
	</_new>
	<add0 public="1" get="inline" set="null" line="5" static="1">
		<f a="tv:p">
			<x path="geom.Tri3D"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add0>
	<add1 public="1" get="inline" set="null" line="9" static="1">
		<f a="p:tv">
			<x path="geom.Matrix1x4"/>
			<x path="geom.Tri3D"/>
			<x path="geom.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A + B</e></m></meta>
	</add1>
	<sub public="1" get="inline" set="null" line="13" static="1">
		<f a="tv:p">
			<x path="geom.Tri3D"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A - B</e></m></meta>
	</sub>
	<scaleMultiply public="1" get="inline" set="null" line="17" static="1">
		<f a="tv:p">
			<x path="geom.Tri3D"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Tri3D"/>
		</f>
		<meta><m n=":op"><e>A * B</e></m></meta>
	</scaleMultiply>
	<centre public="1" get="inline" set="null" line="21" static="1">
		<f a="this">
			<c path="geom.structure.TriVec"/>
			<x path="geom.Matrix1x4"/>
		</f>
		<meta><m n=":impl"/></meta>
	</centre>
	<multiplyQ public="1" get="inline" set="null" line="27" static="1">
		<f a="this:q">
			<c path="geom.structure.TriVec"/>
			<x path="geom.Matrix1x4"/>
			<x path="geom.Tri3D"/>
		</f>
		<meta><m n=":impl"/></meta>
	</multiplyQ>
</class></impl>
	</abstract>
	<class path="geom._Tri3D.Tri3D_Impl_" params="" file="src/geom/Tri3D.hx" private="1" module="geom.Tri3D">
		<_new public="1" set="method" line="4" static="1">
			<f a="tv">
				<c path="geom.structure.TriVec"/>
				<x path="geom.Tri3D"/>
			</f>
			<meta>
				<m n=":impl"/>
				<m n=":noCompletion"/>
			</meta>
		</_new>
		<add0 public="1" get="inline" set="null" line="5" static="1">
			<f a="tv:p">
				<x path="geom.Tri3D"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add0>
		<add1 public="1" get="inline" set="null" line="9" static="1">
			<f a="p:tv">
				<x path="geom.Matrix1x4"/>
				<x path="geom.Tri3D"/>
				<x path="geom.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A + B</e></m></meta>
		</add1>
		<sub public="1" get="inline" set="null" line="13" static="1">
			<f a="tv:p">
				<x path="geom.Tri3D"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A - B</e></m></meta>
		</sub>
		<scaleMultiply public="1" get="inline" set="null" line="17" static="1">
			<f a="tv:p">
				<x path="geom.Tri3D"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Tri3D"/>
			</f>
			<meta><m n=":op"><e>A * B</e></m></meta>
		</scaleMultiply>
		<centre public="1" get="inline" set="null" line="21" static="1">
			<f a="this">
				<c path="geom.structure.TriVec"/>
				<x path="geom.Matrix1x4"/>
			</f>
			<meta><m n=":impl"/></meta>
		</centre>
		<multiplyQ public="1" get="inline" set="null" line="27" static="1">
			<f a="this:q">
				<c path="geom.structure.TriVec"/>
				<x path="geom.Matrix1x4"/>
				<x path="geom.Tri3D"/>
			</f>
			<meta><m n=":impl"/></meta>
		</multiplyQ>
	</class>
	<class path="geom.structure.Mat1x2" params="" file="src/geom/structure/Mat1x2.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<new set="method" line="9"><f a="x:y">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat1x4" params="" file="src/geom/structure/Mat1x4.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<new set="method" line="11">
			<f a="x:y:z:?w" v=":::1.">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat2x2" params="" file="src/geom/structure/Mat2x2.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<new set="method" line="10"><f a="a:b:c:d">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat3x3" params="" file="src/geom/structure/Mat3x3.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<new set="method" line="12"><f a="a:b:c:d:e:f:g:h:i">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Mat4x3" params="" file="src/geom/structure/Mat4x3.hx">
		<a public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</a>
		<b public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</b>
		<c public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</c>
		<d public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</d>
		<e public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</e>
		<f public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</f>
		<g public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</g>
		<h public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</h>
		<i public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</i>
		<j public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</j>
		<k public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</k>
		<l public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</l>
		<new set="method" line="12"><f a="a:b:c:d:e:f:g:h:i:j:k:l">
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Float"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.TriVec" params="" file="src/geom/structure/TriVec.hx">
		<a public="1"><x path="geom.Matrix1x4"/></a>
		<b public="1"><x path="geom.Matrix1x4"/></b>
		<c public="1"><x path="geom.Matrix1x4"/></c>
		<new set="method" line="7"><f a="a:b:c">
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="geom.Matrix1x4"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":structInit"/>
		</meta>
	</class>
	<class path="geom.structure.Vertex" params="" file="src/geom/structure/Vertex.hx">
		<x public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</x>
		<y public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</y>
		<z public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</z>
		<w public="1" expr="1.">
			<x path="Float"/>
			<meta>
				<m n=":value"><e>1.</e></m>
				<m n=":optional"/>
			</meta>
		</w>
		<u public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</u>
		<v public="1" expr="0.">
			<x path="Float"/>
			<meta><m n=":value"><e>0.</e></m></meta>
		</v>
		<new set="method" line="14">
			<f a="x:y:z:?w:u:v" v=":::1.::">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ w : 1. }</e></m></meta>
		</new>
		<meta><m n=":structInit"/></meta>
	</class>
	<typedef path="geom.tydef.TAffineMatrix" params="" file="src/geom/tydef/TAffineMatrix.hx"><a>
	<e9><x path="Float"/></e9>
	<e8><x path="Float"/></e8>
	<e6><x path="Float"/></e6>
	<e5><x path="Float"/></e5>
	<e4><x path="Float"/></e4>
	<e2><x path="Float"/></e2>
	<e14><x path="Float"/></e14>
	<e13><x path="Float"/></e13>
	<e12><x path="Float"/></e12>
	<e10><x path="Float"/></e10>
	<e1><x path="Float"/></e1>
	<e0><x path="Float"/></e0>
</a></typedef>
	<typedef path="geom.tydef.TTriVec" params="" file="src/geom/tydef/TTriVec.hx"><a>
	<c><x path="geom.Matrix1x4"/></c>
	<b><x path="geom.Matrix1x4"/></b>
	<a><x path="geom.Matrix1x4"/></a>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix1x3" params="" file="src/geom/tydef/Tmatrix1x3.hx"><a>
	<z><x path="Float"/></z>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix2x2" params="" file="src/geom/tydef/Tmatrix2x2.hx"><a>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix2x2numbered" params="" file="src/geom/tydef/Tmatrix2x2numbered.hx"><a>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix3x3" params="" file="src/geom/tydef/Tmatrix3x3.hx"><a>
	<i><x path="Float"/></i>
	<h><x path="Float"/></h>
	<g><x path="Float"/></g>
	<f><x path="Float"/></f>
	<e><x path="Float"/></e>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix3x3x3numbered" params="" file="src/geom/tydef/Tmatrix3x3numbered.hx" module="geom.tydef.Tmatrix3x3numbered"><a>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix4x3" params="" file="src/geom/tydef/Tmatrix4x3.hx"><a>
	<l><x path="Float"/></l>
	<k><x path="Float"/></k>
	<j><x path="Float"/></j>
	<i><x path="Float"/></i>
	<h><x path="Float"/></h>
	<g><x path="Float"/></g>
	<f><x path="Float"/></f>
	<e><x path="Float"/></e>
	<d><x path="Float"/></d>
	<c><x path="Float"/></c>
	<b><x path="Float"/></b>
	<a><x path="Float"/></a>
</a></typedef>
	<typedef path="geom.tydef.Tmatrix4x4numbered" params="" file="src/geom/tydef/Tmatrix4x4numbered.hx"><a>
	<_33><x path="Float"/></_33>
	<_32><x path="Float"/></_32>
	<_31><x path="Float"/></_31>
	<_30><x path="Float"/></_30>
	<_23><x path="Float"/></_23>
	<_22><x path="Float"/></_22>
	<_21><x path="Float"/></_21>
	<_20><x path="Float"/></_20>
	<_13><x path="Float"/></_13>
	<_12><x path="Float"/></_12>
	<_11><x path="Float"/></_11>
	<_10><x path="Float"/></_10>
	<_03><x path="Float"/></_03>
	<_02><x path="Float"/></_02>
	<_01><x path="Float"/></_01>
	<_00><x path="Float"/></_00>
</a></typedef>
	<typedef path="geom.tydef.Tpoint" params="" file="src/geom/tydef/Tpoint.hx"><a>
	<y><x path="Float"/></y>
	<x><x path="Float"/></x>
</a></typedef>
	<abstract path="haxe.Function" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is public and
	  * unifies with the type used for type parameter `T`.

	If a type parameter A is assigned to a type parameter B which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="50" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
			pack1.pack2.(...).packN.EnumName
		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="63" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="79" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="96" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="108" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
  [extension](https://haxe.org/manual/lf-static-extension.html) to the
  `enum` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/local/lib/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="132" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="143" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="157" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="169" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
  [extension](https://haxe.org/manual/lf-static-extension.html) to the
  `EnumValue` types.

	If the first argument to any of the methods is null, the result is
	unspecified.</haxe_doc>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>concat</e>
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>The length of `this` Array.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<haxe_doc>A Vector is a storage of fixed size. It can be faster than Array on some
	targets, and is never slower.

	@see https://haxe.org/manual/std-vector.html</haxe_doc>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector">
	<length public="1" get="accessor" set="null" static="1">
		<x path="Int"/>
		<meta><m n=":impl"/></meta>
		<haxe_doc>Returns the length of `this` Vector.</haxe_doc>
	</length>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<abstract path="haxe.extern.Rest" params="T" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx">
		<this><c path="Array"><c path="haxe.extern.Rest.T"/></c></this>
		<haxe_doc><![CDATA[A special abstract type that represents "rest" function argument.

	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<impl><class path="haxe.extern._Rest.Rest_Impl_" params="" file="/usr/local/lib/haxe/std/haxe/extern/Rest.hx" private="1" module="haxe.extern.Rest"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Error" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="js.lib.Object" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<x path="haxe.extern.Rest"><a/></x>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
		</defineProperty>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":native"><e>"Object"</e></m>
		</meta>
	</class>
	<class path="js._Boot.HaxeError" params="" file="/usr/local/lib/haxe/std/js/Boot.hx" private="1" module="js.Boot">
		<extends path="js.lib.Error"/>
		<val><d/></val>
		<new public="1" set="method" line="30"><f a="val">
	<d/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="js.html.Float32Array" params="" file="/usr/local/lib/haxe/std/js/html/Float32Array.hx">
		<c path="js.lib.Float32Array"/>
		<meta><m n=":deprecated"/></meta>
	</typedef>
	<class path="js.lib.ArrayBuffer" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/usr/local/lib/haxe/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer public="1" set="null"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/usr/local/lib/haxe/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="1" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>1</e></m></meta>
		</BYTES_PER_ELEMENT>
		<of public="1" set="method" static="1"><f a="items">
	<x path="haxe.extern.Rest"><c path="Array"><d/></c></x>
	<c path="js.lib.Uint8Array"/>
</f></of>
		<from public="1" set="method" static="1"><f a="source:?mapFn:?thisArg">
	<c path="Array"><x path="Int"/></c>
	<f a=":">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<d/>
	<c path="js.lib.Uint8Array"/>
</f></from>
		<BYTES_PER_ELEMENT_ public="1" set="null">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
		</BYTES_PER_ELEMENT_>
		<length public="1" set="null"><x path="Int"/></length>
		<buffer public="1" set="null"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.lib.Uint8Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<copyWithin public="1" set="method"><f a="target:start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Uint8Array"/>
</f></copyWithin>
		<every public="1" set="method"><f a="callback:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<x path="Bool"/>
</f></every>
		<fill public="1" set="method"><f a="value:?start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Uint8Array"/>
</f></fill>
		<filter public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<d/>
	</f>
	<d/>
	<c path="js.lib.Uint8Array"/>
</f></filter>
		<find public="1" set="method"><f a="predicate:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<d/>
</f></find>
		<findIndex public="1" set="method"><f a="predicate:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<x path="Int"/>
</f></findIndex>
		<forEach public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Void"/>
	</f>
	<d/>
	<x path="Void"/>
</f></forEach>
		<indexOf public="1" set="method"><f a="searchElement:?fromIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<join public="1" set="method"><f a="?separator">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<lastIndexOf public="1" set="method"><f a="searchElement:?fromIndex">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<map public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Int"/>
	</f>
	<d/>
	<c path="js.lib.Uint8Array"/>
</f></map>
		<reduce public="1" set="method">
			<f a="callbackfn:initialValue">
				<f a=":::">
					<d/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<d/>
				</f>
				<d/>
				<d/>
			</f>
			<overloads><reduce public="1" set="method"><f a="callbackfn">
	<f a=":::">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
</f></reduce></overloads>
		</reduce>
		<reduceRight public="1" set="method">
			<f a="callbackfn:initialValue">
				<f a=":::">
					<d/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<d/>
				</f>
				<d/>
				<d/>
			</f>
			<overloads><reduceRight public="1" set="method"><f a="callbackfn">
	<f a=":::">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
</f></reduceRight></overloads>
		</reduceRight>
		<reverse public="1" set="method"><f a=""><c path="js.lib.Uint8Array"/></f></reverse>
		<slice public="1" set="method"><f a="?start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Uint8Array"/>
</f></slice>
		<some public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Int"/>
		<x path="Int"/>
		<c path="js.lib.Uint8Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<x path="Bool"/>
</f></some>
		<sort public="1" set="method"><f a="?compareFn">
	<f a=":">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
	</f>
	<c path="js.lib.Uint8Array"/>
</f></sort>
		<subarray public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Uint8Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.lib.Uint8Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Int"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/usr/local/lib/haxe/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/usr/local/lib/haxe/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT public="1" get="inline" set="null" expr="4" line="29" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>4</e></m></meta>
		</BYTES_PER_ELEMENT>
		<of public="1" set="method" static="1"><f a="items">
	<x path="haxe.extern.Rest"><c path="Array"><d/></c></x>
	<c path="js.lib.Float32Array"/>
</f></of>
		<from public="1" set="method" static="1"><f a="source:?mapFn:?thisArg">
	<c path="Array"><x path="Float"/></c>
	<f a=":">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Float"/>
	</f>
	<d/>
	<c path="js.lib.Float32Array"/>
</f></from>
		<BYTES_PER_ELEMENT_ public="1" set="null">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
		</BYTES_PER_ELEMENT_>
		<length public="1" set="null"><x path="Int"/></length>
		<buffer public="1" set="null"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset public="1" set="null"><x path="Int"/></byteOffset>
		<byteLength public="1" set="null"><x path="Int"/></byteLength>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<overloads><set public="1" set="method"><f a="array:?offset">
	<c path="js.lib.Float32Array"/>
	<x path="Int"/>
	<x path="Void"/>
</f></set></overloads>
		</set>
		<copyWithin public="1" set="method"><f a="target:start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Float32Array"/>
</f></copyWithin>
		<every public="1" set="method"><f a="callback:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<x path="Bool"/>
</f></every>
		<fill public="1" set="method"><f a="value:?start:?end">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Float32Array"/>
</f></fill>
		<filter public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<d/>
	</f>
	<d/>
	<c path="js.lib.Float32Array"/>
</f></filter>
		<find public="1" set="method"><f a="predicate:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<d/>
</f></find>
		<findIndex public="1" set="method"><f a="predicate:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<x path="Int"/>
</f></findIndex>
		<forEach public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Void"/>
	</f>
	<d/>
	<x path="Void"/>
</f></forEach>
		<indexOf public="1" set="method"><f a="searchElement:?fromIndex">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<join public="1" set="method"><f a="?separator">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<lastIndexOf public="1" set="method"><f a="searchElement:?fromIndex">
	<x path="Float"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<map public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Float"/>
	</f>
	<d/>
	<c path="js.lib.Float32Array"/>
</f></map>
		<reduce public="1" set="method">
			<f a="callbackfn:initialValue">
				<f a=":::">
					<d/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<d/>
				</f>
				<d/>
				<d/>
			</f>
			<overloads><reduce public="1" set="method"><f a="callbackfn">
	<f a=":::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Float"/>
	</f>
	<x path="Int"/>
</f></reduce></overloads>
		</reduce>
		<reduceRight public="1" set="method">
			<f a="callbackfn:initialValue">
				<f a=":::">
					<d/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<d/>
				</f>
				<d/>
				<d/>
			</f>
			<overloads><reduceRight public="1" set="method"><f a="callbackfn">
	<f a=":::">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Float"/>
	</f>
	<x path="Int"/>
</f></reduceRight></overloads>
		</reduceRight>
		<reverse public="1" set="method"><f a=""><c path="js.lib.Float32Array"/></f></reverse>
		<slice public="1" set="method"><f a="?start:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Float32Array"/>
</f></slice>
		<some public="1" set="method"><f a="callbackfn:?thisArg">
	<f a="::">
		<x path="Float"/>
		<x path="Int"/>
		<c path="js.lib.Float32Array"/>
		<x path="Bool"/>
	</f>
	<d/>
	<x path="Bool"/>
</f></some>
		<sort public="1" set="method"><f a="?compareFn">
	<f a=":">
		<x path="Float"/>
		<x path="Float"/>
		<x path="Int"/>
	</f>
	<c path="js.lib.Float32Array"/>
</f></sort>
		<subarray public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.Float32Array"/>
</f></subarray>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="js.lib.Float32Array"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="array">
						<c path="Array"><x path="Float"/></c>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/usr/local/lib/haxe/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<x path="haxe.extern.Rest"><d/></x>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<x path="haxe.extern.Rest"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/usr/local/lib/haxe/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<class path="js.lib.RegExpMatch" params="" file="/usr/local/lib/haxe/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1"><x path="Int"/></index>
		<input public="1"><c path="String"/></input>
	</class>
	<class path="js.lib.Symbol" params="" file="/usr/local/lib/haxe/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="60">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, you write `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike plain JavaScript, in Haxe `new Symbol()` syntax is used, however `Symbol(...)` expression
		will be generated as required by JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
</haxe>